name: Deploy to PyPI

on:
  workflow_dispatch:
    inputs:
      version_tag:
        description: "Release version tag"
        default: "latest"
      branch:
        description: "Source branch"
        default: "main"
      build_os:
        description: "Select OS to build wheels for"
        required: true
        default: "Both"
        type: choice
        options:
          - Both
          - MacOS
          - Ubuntu

env:
  BUILD_TYPE: Release
  LINUX_ARCH: "x86_64"
  MACOS_ARCH: "arm64"

jobs:
  prepare:
    name: Prepare
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.determine_version.outputs.version }}
      version_no_v: ${{ steps.sanitize.outputs.no_v }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.branch }}
          fetch-depth: 0

      - name: Determine version tag
        id: determine_version
        run: |
          if [[ "${{ inputs.version_tag }}" == "latest" ]]; then
            git fetch --tags
            echo "version=$(git describe --tags --abbrev=0)" >> $GITHUB_OUTPUT
          else
            echo "version=${{ inputs.version_tag }}" >> $GITHUB_OUTPUT
          fi

      - name: Checkout tag (if not latest)
        if: ${{ inputs.version_tag != 'latest' }}
        run: |
          git checkout ${{ steps.determine_version.outputs.version }}

      - name: Strip leading “v” of version tag
        id: sanitize
        run: |
          raw=${{ steps.determine_version.outputs.version }}
          echo "version_no_v=${raw#v}" >> $GITHUB_OUTPUT

  build-macos:
    needs: prepare
    name: Build MacOS
    runs-on: macos-latest
    if: ${{ inputs.build_os == 'Both' || inputs.build_os == 'MacOS' }}
    strategy:
      fail-fast: true
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12", "3.13"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.prepare.outputs.version }}

      - name: Configure wheel build env
        run: |
          PV=$(echo "${{ matrix.python-version }}" | tr -d '.')
          echo "PY_VERSION=$PV" >> $GITHUB_ENV
          echo "MACOSX_DEPLOYMENT_TARGET=11.1" >> $GITHUB_ENV
          echo "ARCHFLAGS=-arch ${{ env.MACOS_ARCH }}" >> $GITHUB_ENV

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: pip

      - name: Install deps
        run: |
          pip install numpy 'torch>=2.4.0'

      - name: CMake configure
        run: |
          TORCH_CMAKE_PREFIX_PATH=$(python -c 'import torch.utils; print(torch.utils.cmake_prefix_path)')
          cmake -B build \
            -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} \
            -DCMAKE_OSX_ARCHITECTURES=${{ env.MACOS_ARCH }} \
            -DCMAKE_PREFIX_PATH="$TORCH_CMAKE_PREFIX_PATH"

      - name: CMake build
        run: cmake --build build --parallel

      - name: Build macOS wheel
        env:
          CIBW_PLATFORM: macos
          CIBW_BUILD: cp${{ env.PY_VERSION }}*
          CIBW_ARCHS: ${{ env.MACOS_ARCH }}
          CIBW_REPAIR_WHEEL_COMMAND_MACOS: >
            delocate-wheel -e torch -w {dest_dir} {wheel}
          CIBW_BEFORE_BUILD: |
            pip install numpy 'torch>2.4.0'
            cmake --build build --config ${{ env.BUILD_TYPE }} --parallel
        run: |
          export TORCH_LIB=$(python -c 'import torch; print(torch.__path__[0] + "/lib")')
          export DYLD_FALLBACK_LIBRARY_PATH="$TORCH_LIB:$DYLD_FALLBACK_LIBRARY_PATH"
          pip install cibuildwheel
          python -m cibuildwheel --output-dir wheelhouse

      - name: Upload macOS wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-macos-${{ matrix.os }}-${{ env.MACOS_ARCH }}-${{ matrix.python-version }}
          path: wheelhouse/*.whl

  build-linux:
    needs: prepare
    name: Build Linux
    runs-on: ubuntu-latest
    if: ${{ inputs.build_os == 'Both' || inputs.build_os == 'Ubuntu' }}
    strategy:
      fail-fast: true
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12", "3.13"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.prepare.outputs.version }}
          fetch-depth: 0

      - name: Configure wheel build env
        run: |
          PV=$(echo "${{ matrix.python-version }}" | tr -d '.')
          echo "PY_VERSION=$PV" >> $GITHUB_ENV

      - name: Build Linux wheel
        env:
          CIBW_PLATFORM: linux
          CIBW_BUILD: cp${{ env.PY_VERSION }}*
          CIBW_ARCHS: ${{ env.LINUX_ARCH }}
          CIBW_SKIP: "*musllinux*"
          CIBW_REPAIR_WHEEL_COMMAND_LINUX: |
            export LD_LIBRARY_PATH=$(python -c "import torch; print(torch.__path__[0] + '/lib')")
            auditwheel repair --exclude lib*.so -w {dest_dir} {wheel}
          CIBW_BEFORE_BUILD: |
            pip install numpy
            pip install 'torch>=2.4.0' --extra-index-url https://download.pytorch.org/whl/cpu
            TORCH_LIB=$(python -c "import torch; print(torch.__path__[0] + '/lib')")
            TORCH_CMAKE_PREFIX_PATH=$(python -c "import torch.utils; print(torch.utils.cmake_prefix_path)")
            export LD_LIBRARY_PATH="$TORCH_LIB:$LD_LIBRARY_PATH"
            cmake -B build -DCMAKE_BUILD_TYPE=${BUILD_TYPE} \
                  -DPython3_EXECUTABLE=$(which python) \
                  -DCMAKE_PREFIX_PATH="$TORCH_CMAKE_PREFIX_PATH"
            cmake --build build --parallel
        run: |
          pip install cibuildwheel
          python -m cibuildwheel --output-dir wheelhouse

      - name: Upload Ubuntu wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-ubuntu-${{ env.LINUX_ARCH }}-${{ matrix.python-version }}
          path: wheelhouse/*.whl

  publish-pypi:
    name: Publish to PyPI
    if: ${{ always() }}
    needs: [build-macos, build-linux]
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Download all wheels
        uses: actions/download-artifact@v4
        with:
          pattern: wheels-*

      - name: Merge wheels
        run: |
          mkdir dist
          find . -name '*.whl' -exec mv {} dist/ \;

      - name: Publish to PyPI
        if: ${{ needs.build-macos.result == 'success' || needs.build-linux.result == 'success' }}
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}
