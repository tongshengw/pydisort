name: Python Wheel Builder

on:
  workflow_dispatch:
    inputs:
      version_tag:
        description: "Release version tag (e.g., v1.0.0)"
        required: true
        default: "v0.10.2"
      branch:
        description: "Branch containing workflow YAML"
        required: true
        default: "test-packaging"
        type: string

env:
  BUILD_TYPE: Release

jobs:
  build-wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        #os: [ubuntu-22.04, macos-14]
        os: [macos-15]
        #python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]
        python-version: ["3.9"]
        include:
          #- os: ubuntu-22.04
          #  arch: x86_64
          #- os: ubuntu-22.04
          #  arch: aarch64
          #- os: macos-14
          #  arch: x86_64
          - os: macos-15
            arch: arm64

    steps:
      - name: Checkout workflow definition branch (for YAML and scripts)
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.branch }}

      - name: Fetch and checkout release tag ${{ github.event.inputs.version_tag }}
        run: |
          git fetch --tags
          git checkout ${{ github.event.inputs.version_tag }}

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install system dependencies (Linux)
        if: matrix.os == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            cmake \
            ninja-build \
            libopenblas-dev

      - name: Install system dependencies (macOS)
        if: matrix.os == 'macos-15'
        run: |
          brew install cmake ninja openblas

      - name: Install Python dependencies
        run: |
          python -m pip install -U pip setuptools wheel
          python -m pip install -r requirements.txt

      - name: Configure CMake
        run: |
          cmake -B ${{github.workspace}}/build \
          -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} \
          -DCMAKE_INSTALL_PREFIX=${{ github.workspace }}/install \
          -DCMAKE_PREFIX_PATH="$(python -c 'import torch; print(torch.utils.cmake_prefix_path)')" \
          -DBUILD_TESTS=ON

      - name: Build and Install
        run: |
          cmake --build build --target install --config ${{ env.BUILD_TYPE }}
          pip install .

      - name: Configure build environment
        run: |
          VERSION="${{ github.event.inputs.version_tag }}"
          VERSION="${VERSION#v}"  # Strip the leading 'v'
          PY_VERSION=$(echo "${{ matrix.python-version }}" | tr -d '.')
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "PY_VERSION=$PY_VERSION" >> $GITHUB_ENV

      - name: Build wheel
        env:
          CIBW_BUILD: cp${{ env.PY_VERSION }}*
          CIBW_ARCHS: ${{ matrix.arch }}
          CIBW_ENVIRONMENT: "SETUPTOOLS_SCM_PRETEND_VERSION=${{ env.VERSION }}"
        run: |
          export MACOSX_DEPLOYMENT_TARGET=15.0
          TORCH_LIB=$(python -c 'import torch; print(torch.__path__[0] + "/lib")')
          export TORCH_LIB
          export DYLD_FALLBACK_LIBRARY_PATH="$TORCH_LIB:$DYLD_FALLBACK_LIBRARY_PATH"
          python -m pip install cibuildwheel
          PLATFORM=$([ "${{ matrix.os }}" = "macos-15" ] && echo "macos" || echo "linux")
          python -m cibuildwheel --platform $PLATFORM --output-dir wheelhouse

      - uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.os }}-${{ matrix.arch }}
          path: ./wheelhouse/*.whl

  upload-pypi:
    needs: build-wheels
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          pattern: wheels-*
          merge-multiple-artifacts: true
          path: dist

      - name: Flatten distribution directory
        run: |
          # Move all wheel files from subdirectories to the dist/ folder.
          find dist -mindepth 2 -type f -name '*.whl' -exec mv {} dist/ \; || true
          # Remove any remaining directories under dist.
          find dist -mindepth 1 -type d -exec rm -rf {} \; || true

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}
